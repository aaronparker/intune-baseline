{
  "@odata.context": "https://graph.microsoft.com/beta/$metadata#deviceManagement/deviceConfigurations(assignments())/$entity",
  "@odata.type": "#microsoft.graph.windows10CustomConfiguration",
  "@odata.id": "deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')",
  "@odata.editLink": "deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration",
  "id": "4ecb2a99-87be-4c27-8536-ebec093999b1",
  "lastModifiedDateTime@odata.type": "#DateTimeOffset",
  "lastModifiedDateTime": "2025-03-06T03:09:59.9208738Z",
  "roleScopeTagIds@odata.type": "#Collection(String)",
  "roleScopeTagIds": [
    "0"
  ],
  "supportsScopeTags": true,
  "deviceManagementApplicabilityRuleOsEdition": null,
  "deviceManagementApplicabilityRuleOsVersion": null,
  "deviceManagementApplicabilityRuleDeviceMode": null,
  "createdDateTime@odata.type": "#DateTimeOffset",
  "createdDateTime": "2025-03-06T03:09:59.9208738Z",
  "description": "Places devices into AppLocker enforced mode. Note issues documented here: https://docs.microsoft.com/en-us/mem/autopilot/policy-conflicts",
  "displayName": "Prod-Windows-AppLocker-EnforcedMode",
  "version": 1,
  "omaSettings@odata.type": "#Collection(microsoft.graph.omaSetting)",
  "omaSettings": [
    {
      "@odata.type": "#microsoft.graph.omaSettingStringXml",
      "displayName": "AppLocker DLLs",
      "description": "Enforced mode for DLLs",
      "omaUri": "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/Native/DLL/Policy",
      "secretReferenceValueId": null,
      "isEncrypted": false,
      "fileName": "AppLockerRules-20231105-Dll-Enforce.xml",
      "value@odata.type": "#Binary",
      "value": ""
    },
    {
      "@odata.type": "#microsoft.graph.omaSettingStringXml",
      "displayName": "AppLocker Executable",
      "description": "Enforced mode for executables",
      "omaUri": "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/Native/EXE/Policy",
      "secretReferenceValueId": null,
      "isEncrypted": false,
      "fileName": "AppLockerRules-20231105-Exe-Enforce.xml",
      "value@odata.type": "#Binary",
      "value": ""
    },
    {
      "@odata.type": "#microsoft.graph.omaSettingStringXml",
      "displayName": "AppLocker Windows Installer",
      "description": "Enforced mode for MSI files",
      "omaUri": "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/Native/MSI/Policy",
      "secretReferenceValueId": null,
      "isEncrypted": false,
      "fileName": "AppLockerRules-20231105-Msi-Enforce.xml",
      "value@odata.type": "#Binary",
      "value": "PFJ1bGVDb2xsZWN0aW9uIFR5cGU9Ik1zaSIgRW5mb3JjZW1lbnRNb2RlPSJFbmFibGVkIj4KICAgIDxGaWxlUGF0aFJ1bGUgSWQ9ImM2NGU1MmZlLWJkMDUtNDNlZC1hZTkxLWYzNjEyMTgyODI5ZSIgTmFtZT0iQWxsIFdpbmRvd3MgSW5zdGFsbGVyIGZpbGVzIHVuZGVyICV3aW5kaXIlXGNjbWNhY2hlIiBEZXNjcmlwdGlvbj0iQWxsb3dzIGV2ZXJ5b25lIHRvIHJ1biBpbnN0YWxsZXIgZmlsZXMgaW4gdGhlIFNDQ00gY2FjaGUuIiBVc2VyT3JHcm91cFNpZD0iUy0xLTEtMCIgQWN0aW9uPSJBbGxvdyI+CiAgICAgICAgPENvbmRpdGlvbnM+CiAgICAgICAgICAgIDxGaWxlUGF0aENvbmRpdGlvbiBQYXRoPSIlV0lORElSJVxjY21jYWNoZVwqIiAvPgogICAgICAgIDwvQ29uZGl0aW9ucz4KICAgIDwvRmlsZVBhdGhSdWxlPgogICAgPEZpbGVQYXRoUnVsZSBJZD0iNWIyOTAxODQtMzQ1YS00NDUzLWIxODQtNDUzMDVmNmQ5YTU0IiBOYW1lPSIoRGVmYXVsdCBSdWxlKSBBbGwgV2luZG93cyBJbnN0YWxsZXIgZmlsZXMgaW4gJXN5c3RlbWRyaXZlJVxXaW5kb3dzXEluc3RhbGxlciIgRGVzY3JpcHRpb249IkFsbG93cyBtZW1iZXJzIG9mIHRoZSBFdmVyeW9uZSBncm91cCB0byBydW4gYWxsIFdpbmRvd3MgSW5zdGFsbGVyIGZpbGVzIGxvY2F0ZWQgaW4gJXN5c3RlbWRyaXZlJVxXaW5kb3dzXEluc3RhbGxlci4iIFVzZXJPckdyb3VwU2lkPSJTLTEtMS0wIiBBY3Rpb249IkFsbG93Ij4KICAgICAgICA8Q29uZGl0aW9ucz4KICAgICAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IiVXSU5ESVIlXEluc3RhbGxlclwqIiAvPgogICAgICAgIDwvQ29uZGl0aW9ucz4KICAgIDwvRmlsZVBhdGhSdWxlPgogICAgPEZpbGVQYXRoUnVsZSBJZD0iNjRhZDQ2ZmYtMGQ3MS00ZmEwLWEzMGItM2YzZDMwYzU0MzNkIiBOYW1lPSIoRGVmYXVsdCBSdWxlKSBBbGwgV2luZG93cyBJbnN0YWxsZXIgZmlsZXMiIERlc2NyaXB0aW9uPSJBbGxvd3MgbWVtYmVycyBvZiB0aGUgbG9jYWwgQWRtaW5pc3RyYXRvcnMgZ3JvdXAgdG8gcnVuIGFsbCBXaW5kb3dzIEluc3RhbGxlciBmaWxlcy4iIFVzZXJPckdyb3VwU2lkPSJTLTEtNS0zMi01NDQiIEFjdGlvbj0iQWxsb3ciPgogICAgICAgIDxDb25kaXRpb25zPgogICAgICAgICAgICA8RmlsZVBhdGhDb25kaXRpb24gUGF0aD0iKi4qIiAvPgogICAgICAgIDwvQ29uZGl0aW9ucz4KICAgIDwvRmlsZVBhdGhSdWxlPgogICAgPEZpbGVQdWJsaXNoZXJSdWxlIElkPSJlMWEzNWZmNy1hOTA1LTRhNTctOTMyNS1kMzJkMzkwNThhYjEiIE5hbWU9Ik1pY3Jvc29mdCBUZWFtczogU2lnbmVyL3Byb2R1Y3QgcnVsZSBmb3IgTz1NSUNST1NPRlQgQ09SUE9SQVRJT04sIEw9UkVETU9ORCwgUz1XQVNISU5HVE9OLCBDPVVTL01JQ1JPU09GVCBURUFNUyIgRGVzY3JpcHRpb249IkluZm9ybWF0aW9uIGFjcXVpcmVkIGZyb20gVHJ1c3RlZFNpZ25lcnMucHMxIiBVc2VyT3JHcm91cFNpZD0iUy0xLTEtMCIgQWN0aW9uPSJBbGxvdyI+CiAgICAgICAgPENvbmRpdGlvbnM+CiAgICAgICAgICAgIDxGaWxlUHVibGlzaGVyQ29uZGl0aW9uIFB1Ymxpc2hlck5hbWU9Ik89TUlDUk9TT0ZUIENPUlBPUkFUSU9OLCBMPVJFRE1PTkQsIFM9V0FTSElOR1RPTiwgQz1VUyIgUHJvZHVjdE5hbWU9Ik1JQ1JPU09GVCBURUFNUyIgQmluYXJ5TmFtZT0iKiI+CiAgICAgICAgICAgICAgICA8QmluYXJ5VmVyc2lvblJhbmdlIExvd1NlY3Rpb249IioiIEhpZ2hTZWN0aW9uPSIqIiAvPgogICAgICAgICAgICA8L0ZpbGVQdWJsaXNoZXJDb25kaXRpb24+CiAgICAgICAgPC9Db25kaXRpb25zPgogICAgPC9GaWxlUHVibGlzaGVyUnVsZT4KICAgIDxGaWxlUHVibGlzaGVyUnVsZSBJZD0iZmNlYjlkMTAtM2JkOS00NTAyLTg4NTQtYTFjZDJkZWI2NjZmIiBOYW1lPSJNaWNyb3NvZnQtc2lnbmVkIE1TSSBmaWxlczogU2lnbmVyIHJ1bGUgZm9yIE89TUlDUk9TT0ZUIENPUlBPUkFUSU9OLCBMPVJFRE1PTkQsIFM9V0FTSElOR1RPTiwgQz1VUyIgRGVzY3JpcHRpb249IkluZm9ybWF0aW9uIGFjcXVpcmVkIGZyb20gVHJ1c3RlZFNpZ25lcnMucHMxIiBVc2VyT3JHcm91cFNpZD0iUy0xLTEtMCIgQWN0aW9uPSJBbGxvdyI+CiAgICAgICAgPENvbmRpdGlvbnM+CiAgICAgICAgICAgIDxGaWxlUHVibGlzaGVyQ29uZGl0aW9uIFB1Ymxpc2hlck5hbWU9Ik89TUlDUk9TT0ZUIENPUlBPUkFUSU9OLCBMPVJFRE1PTkQsIFM9V0FTSElOR1RPTiwgQz1VUyIgUHJvZHVjdE5hbWU9IioiIEJpbmFyeU5hbWU9IioiPgogICAgICAgICAgICAgICAgPEJpbmFyeVZlcnNpb25SYW5nZSBMb3dTZWN0aW9uPSIqIiBIaWdoU2VjdGlvbj0iKiIgLz4KICAgICAgICAgICAgPC9GaWxlUHVibGlzaGVyQ29uZGl0aW9uPgogICAgICAgIDwvQ29uZGl0aW9ucz4KICAgIDwvRmlsZVB1Ymxpc2hlclJ1bGU+CiAgICA8RmlsZVBhdGhSdWxlIElkPSJmNzk5OTViYy0xYTAxLTRiOTktYTE3OC1iMGYwNzI1Mzk3YmUiIE5hbWU9IkRlbnkgQzpcV2luZG93c1xUZW1wIiBEZXNjcmlwdGlvbj0iIiBVc2VyT3JHcm91cFNpZD0iUy0xLTEtMCIgQWN0aW9uPSJEZW55Ij4KICAgICAgICA8Q29uZGl0aW9ucz4KICAgICAgICAgICAgPEZpbGVQYXRoQ29uZGl0aW9uIFBhdGg9IkM6XFdpbmRvd3NcVGVtcCIgLz4KICAgICAgICA8L0NvbmRpdGlvbnM+CiAgICA8L0ZpbGVQYXRoUnVsZT4KPC9SdWxlQ29sbGVjdGlvbj4="
    },
    {
      "@odata.type": "#microsoft.graph.omaSettingStringXml",
      "displayName": "AppLocker Script",
      "description": "Enforced mode for scripts",
      "omaUri": "./Vendor/MSFT/AppLocker/ApplicationLaunchRestrictions/Native/Script/Policy",
      "secretReferenceValueId": null,
      "isEncrypted": false,
      "fileName": "AppLockerRules-20231105-Script-Enforce.xml",
      "value@odata.type": "#Binary",
      "value": ""
    }
  ],
  "assignments@odata.context": "https://graph.microsoft.com/beta/$metadata#deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/assignments",
  "assignments@odata.associationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/assignments/$ref",
  "assignments@odata.navigationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/assignments",
  "assignments": [
    {
      "@odata.type": "#microsoft.graph.deviceConfigurationAssignment",
      "@odata.id": "deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/assignments('4ecb2a99-87be-4c27-8536-ebec093999b1_adadadad-808e-44e2-905a-0b7873a8a531')",
      "@odata.editLink": "deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/assignments('4ecb2a99-87be-4c27-8536-ebec093999b1_adadadad-808e-44e2-905a-0b7873a8a531')",
      "id": "4ecb2a99-87be-4c27-8536-ebec093999b1_adadadad-808e-44e2-905a-0b7873a8a531",
      "source@odata.type": "#microsoft.graph.deviceAndAppManagementAssignmentSource",
      "source": "direct",
      "sourceId": "4ecb2a99-87be-4c27-8536-ebec093999b1",
      "intent@odata.type": "#microsoft.graph.deviceConfigAssignmentIntent",
      "intent": "apply",
      "target": {
        "@odata.type": "#microsoft.graph.allDevicesAssignmentTarget",
        "deviceAndAppManagementAssignmentFilterId": null,
        "deviceAndAppManagementAssignmentFilterType@odata.type": "#microsoft.graph.deviceAndAppManagementAssignmentFilterType",
        "deviceAndAppManagementAssignmentFilterType": "none"
      }
    }
  ],
  "deviceSettingStateSummaries@odata.associationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/deviceSettingStateSummaries/$ref",
  "deviceSettingStateSummaries@odata.navigationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/deviceSettingStateSummaries",
  "deviceStatuses@odata.associationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/deviceStatuses/$ref",
  "deviceStatuses@odata.navigationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/deviceStatuses",
  "deviceStatusOverview@odata.associationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/deviceStatusOverview/$ref",
  "deviceStatusOverview@odata.navigationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/deviceStatusOverview",
  "groupAssignments@odata.associationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/groupAssignments/$ref",
  "groupAssignments@odata.navigationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/groupAssignments",
  "userStatuses@odata.associationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/userStatuses/$ref",
  "userStatuses@odata.navigationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/userStatuses",
  "userStatusOverview@odata.associationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/userStatusOverview/$ref",
  "userStatusOverview@odata.navigationLink": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.windows10CustomConfiguration/userStatusOverview",
  "#microsoft.graph.assign": {
    "title": "microsoft.graph.assign",
    "target": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.deviceConfiguration/microsoft.graph.assign"
  },
  "#microsoft.graph.assignedAccessMultiModeProfiles": {
    "title": "microsoft.graph.assignedAccessMultiModeProfiles",
    "target": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.deviceConfiguration/microsoft.graph.assignedAccessMultiModeProfiles"
  },
  "#microsoft.graph.windowsPrivacyAccessControls": {
    "title": "microsoft.graph.windowsPrivacyAccessControls",
    "target": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.deviceConfiguration/microsoft.graph.windowsPrivacyAccessControls"
  },
  "#microsoft.graph.getOmaSettingPlainTextValue": {
    "title": "microsoft.graph.getOmaSettingPlainTextValue",
    "target": "https://graph.microsoft.com/beta/deviceManagement/deviceConfigurations('4ecb2a99-87be-4c27-8536-ebec093999b1')/microsoft.graph.deviceConfiguration/microsoft.graph.getOmaSettingPlainTextValue"
  }
}
